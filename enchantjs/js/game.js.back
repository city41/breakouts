/****************************************
 * enchant.js version of Breakout
 *
 * by Maciej Kus http://maciejkus.com/
 *
 * http://enchantjs.com/
 *
 * created for http://www.jsbreakouts.org/
 ****************************************/

var gameWidth = 320,
    gameHeight = 416,
    lives = 3,
    score = 0,
    level = 1;


//load enchant
enchant();

window.onload = function() {
  var game = new Core(gameWidth,gameHeight);
  game.scale = 1;
  game.fps = 50;
  game.preload('resources/bg_prerendered.png',
               'resources/tiles.png',
               'resources/logo.png'); 

  //once game loaded
  game.onload = function() {
    var scene = new GameScene();
    game.pushScene(scene);
  }

  game.start();
};


//main game scene
var GameScene = Class.create(Scene, {
  initialize: function() {
    //to access game instance
    var game = enchant.Game.instance;
    Scene.apply(this);

    //background
    var bg = new Sprite(gameWidth,gameHeight);
    bg.image = game.assets['resources/bg_prerendered.png'];
    this.addChild(bg);

    var bottomLabel = new Label('Lives: ' + lives + ' Score: ' + score + ' Level: ' + level);
    bottomLabel.y = this.height - 16;
    bottomLabel.textAlign = 'center';
    bottomLabel.color = 'black';
    bottomLabel.font = '16px Verdana';
    this.bottomLabel = bottomLabel;
    this.addChild(bottomLabel);
   
    var paddle = new Paddle();
    this.addChild(paddle);
    this.paddle = paddle;

    //paddle movement
    //enchant doesnt have a builtin way to deal with mousemove
    gameID = document.getElementById('enchant-stage');
    gameID.addEventListener("mousemove", function(e) {
      paddle.x = e.pageX - gameID.offsetLeft - paddle.width/2;
      //stop paddle from moving into walls
      if(paddle.x+paddle.width > game.width) paddle.x = game.width-paddle.width;
      else if (paddle.x < 0) paddle.x = 0;
    });

    populateBricks();
    addPowers();
    for (var i = 0, j = bricks.length; i < j; i++) {
      this.addChild(bricks[i]);
    }
    
    balls = [];
    balls[0] = new Ball(game.width/4,game.height/2,3,3);
    this.addChild(balls[0]);

    this.addEventListener(Event.ENTER_FRAME, this.update); //game starts moving
  }, //end initialize
  update: function() {
    for (var i = 0, j = powerUps.length; i < j; i++) {
      powerUps[i].move();
    }
    for (i = 0, j = powerDowns.length; i < j; i++) {
      powerDowns[i].move();
    }
    for (i = 0, j = balls.length; i < j; i++) {
      balls[i].move();
      //collision check
      //walls
      var wallThickness = 16;
      if(balls[i].x < wallThickness || balls[i].x+balls[i].width > this.width - wallThickness) balls[i].dx = -balls[i].dx;
      if(balls[i].y < wallThickness) balls[i].dy = -balls[i].dy;

      //intersect() is enchantjs collision detection function
      //paddle
      if(balls[i].intersect(this.paddle)) {
         //hitting paddle always bounces ball up
         balls[i].dy = (balls[i].dy < 0) ? balls[i].dy : -balls[i].dy;
         //angle of bounce (dx)
         balls[i].dx = balls[i].determineBounceVelocity(this.paddle);
         this.update();
      }
      //bricks collision
      for(var n = 0, m = bricks.length; n < m; n++) {
        if(balls[i].intersect(bricks[n])) {
          score += 100;
          this.bottomLabel.text = 'Lives: ' + lives + ' Score: ' + score + ' Level: ' + level;

          if(bricks[n].powerUps) {
            powerUps.push(new PowerUp(bricks[n].x,bricks[n].y));
            this.addChild(powerUps[powerUps.length -1]);
       //     balls.push(new Ball(this.width/4,this.height/2,3,3));
        //    this.addChild(balls[balls.length -1]);
          }
          else if(bricks[n].powerDowns) {
console.log('power down');
          }

          balls[i].dy = -balls[i].dy;
          balls[i].dx = balls[i].determineBounceVelocity(bricks[n]);
          //remove brick[n] from the scene
          this.removeBrickAnime(bricks[n]);
          //this.removeChild(bricks[n]);
          bricks.splice(n,1);
        }
      } //end for bricks
    } //end for balls
    //replace current level with next level
    if(bricks.length < 1) {
      levels.shift();
      var nextLevel = levels.length ? new GameScene() : new endScene('You Win');
      enchant.Game.instance.replaceScene(nextLevel);
    }

  }, //end update
  removeBrickAnime: function(brick) {
     brick.frame = [ brick.frame+1, brick.frame+2, brick.frame+3, brick.frame+4, 5,  null];
  } //end removeBrickAnime

});

//game over scene
var endScene = Class.create(Scene, {
  initialize: function(text) {
    Scene.apply(this);
    var game = enchant.Game.instance;

    //background
    var bg = new Sprite(gameWidth,gameHeight);
    bg.image = game.assets['resources/bg_prerendered.png'];
    this.addChild(bg);

    //breakout image
    var logo = new Sprite(131,200);
    logo.image = game.assets['resources/logo.png'];
    logo.x = this.width/2 - logo.width/2;
    logo.y = 20;
    this.addChild(logo);

    //text
    var label = new Label('Click here to start<br>Use L/R arrow to change levels');
    label.textAlign = 'center';
    label.x = 0;
    label.y = this.height/2 + 48;
    label.color = 'black';
    var label2 = new Label(text);
    label2.x = 0;
    label2.y = this.height - 40;
    label2.color = 'black';
    label2.textAlign = 'center';
    label2.font = '32px monospace';
         
    this.addChild(label);
    this.addChild(label2);
  } //end initialize

});

//paddle 
var Paddle = Class.create(Sprite, {
  initialize: function() {
    Sprite.apply(this,[48,16]);
    var game = enchant.Game.instance;
    this.image = game.assets['resources/tiles.png'];
    //select spritesheet frame
    this.frame = 16;
    this.x = game.width/2-this.width/2;
    this.y = game.height-48;

  } //end initialize
});

var X, g = 3, o = 1, b = 0, r = 2;
var levels = [
  { bricks: [
     [X,X,g,o,g,X,X],
     [o,b,g,g,g,b,o],
     [X,b,b,b,b,b,X]
    ],
    powerUps : 1,
    powerDowns : 1
  } /*, 
  { bricks: [
      [X,g,o,g,o,g,X],
      [X,b,b,b,b,b,X],
      [g,b,r,b,r,b,g],
      [g,b,b,b,b,b,g],
      [g,b,X,X,X,b,g],
      [X,b,b,b,b,b,X]
    ],
    powerUps: 1,
    powerDowns: 1
  }, 
  { bricks: [
      [X,b,X,g,X,b,X],
      [b,X,b,o,b,X,b],
      [b,g,b,o,b,g,b],
      [b,X,b,o,b,X,b],
      [X,b,X,X,X,b,X],
      [r,X,r,X,r,X,r]
    ],
    powerUps: 2,
    powerDowns: 2
  },
  { bricks: [
      [r,g,o,b,r,g,o],
      [b,X,X,X,X,X,X],
      [o,X,o,b,r,g,o],
      [g,X,g,X,X,X,b],
      [r,X,r,X,r,X,r],
      [b,X,b,o,g,X,g],
      [o,X,X,X,X,X,o],
      [g,r,b,o,g,r,b]
    ],
    powerUps: 2,
    powerDowns: 3
   } */
];

var Brick = Class.create(Sprite, {
  initialize: function(x,y,color) {
    Sprite.apply(this,[32,16]);
    this.image = enchant.Game.instance.assets['resources/tiles.png'];
    var startFrame = color*6;
    this.frame = [startFrame + 4, startFrame +3, startFrame +2, startFrame+1,startFrame, null];
    this.x = x + 48;
    this.y = y + 64;
  }
});

Brick.prototype.powerDowns = 0;
Brick.prototype.powerUps = 0;

var bricks = [];
var powerUps = [];
var powerDowns = [];
var powerDowns = [];

function populateBricks() {
  for (var i = 0, j = levels[0].bricks.length; i < j; i++) {
    for (var k = 0, l = levels[0].bricks[i].length; k < l; k++) {
       if(levels[0].bricks[i][k] !== X) {
         var newBrickX = k * 32;
         var newBrickY = i * 16;
         var newBrick = new Brick(newBrickX,newBrickY,levels[0].bricks[i][k]);
         bricks.push(newBrick);
       } //end if
    }
  }  
};

function addPowers() {
  var powerUps = levels[0].powerUps;
  var powerDowns = levels[0].powerDowns;
  while(powerUps > 0) {
console.log('power');
    var rand = Math.floor(Math.random()*bricks.length);
    if (!bricks[rand].powerUps && !bricks[rand].powerDowns) {
       bricks[rand].powerUps = 1;
       powerUps--;
    }
  }
  while(powerDowns > 0) {
    var rand = Math.floor(Math.random()*bricks.length);
    if (!bricks[rand].powerUps && !bricks[rand].powerDowns) {
       bricks[rand].powerDowns = 1;
       powerDowns--;
    }
  }
}

var balls = [];
var Ball = Class.create(Sprite, {
  initialize: function(x,y,dx,dy) {
    Sprite.apply(this,[16,16]);
    this.image = enchant.Game.instance.assets['resources/tiles.png'];
    this.frame = 51;
    this.x = x;
    this.y = y;
    this.dx = dx;
    this.dy = dy;
  },
  move: function() {
    this.x += this.dx;
    this.y += this.dy;
    //change the image to make ball spin
    //this is not too fast and spins in correct direction
    //depending on if ball is moving up or down
    switch (Math.floor(this.y/16)%5) {
      case 0: 
        this.frame = 55;
        break;
      case 1: 
        this.frame = 54;
        break;
      case 2: 
        this.frame = 53;
        break;
      case 3: 
        this.frame = 52;
        break;
      default:
        this.frame = 51;
     }
  }
});
 
//calculate dx change
Ball.prototype.determineBounceVelocity  = function(p) {
  var ratio = (p.width/10)/2
  return ((this.x-p.x)/10)-ratio;
};

//powerups
var PowerUp = Class.create(Sprite, {
  initialize: function(x,y) {
        Sprite.apply(this,[16,16]);
    this.image = enchant.Game.instance.assets['resources/tiles.png'];
    this.frame = 78;
    this.x = x;
    this.y = y;
  },
  move: function() {
    this.y += 3;
  }
});
